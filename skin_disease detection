{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceType":"datasetVersion","sourceId":9990570,"datasetId":4301853,"databundleVersionId":10257737,"isSourceIdPinned":false},{"sourceType":"datasetVersion","sourceId":5576091,"datasetId":3133102,"databundleVersionId":5650946,"isSourceIdPinned":false}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import ResNet50, VGG16, DenseNet121\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import Adam\nimport json\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.models import load_model\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom tensorflow.keras.applications import EfficientNetB3, InceptionV3\nfrom tensorflow.keras.applications.efficientnet import preprocess_input as efficient_preprocess\nfrom tensorflow.keras.applications.inception_v3 import preprocess_input as inception_preprocess\nfrom tensorflow.keras.applications.resnet50 import preprocess_input as resnet_preprocess\nfrom tensorflow.keras.applications.densenet import preprocess_input as densenet_preprocess\nfrom tensorflow.keras.applications.vgg16 import preprocess_input as vgg_preprocess\nfrom sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc\nfrom sklearn.preprocessing import label_binarize\nfrom itertools import cycle\nfrom tensorflow.keras.models import load_model\nimport random","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2025-08-10T04:45:25.382687Z","iopub.execute_input":"2025-08-10T04:45:25.382927Z","iopub.status.idle":"2025-08-10T04:45:38.890964Z","shell.execute_reply.started":"2025-08-10T04:45:25.382908Z","shell.execute_reply":"2025-08-10T04:45:38.890385Z"},"trusted":true},"outputs":[{"name":"stderr","text":"2025-08-10 04:45:27.744982: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754801127.936884      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754801127.989322      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"ascanipek/skin-diseases\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-09T19:30:46.475229Z","iopub.execute_input":"2025-08-09T19:30:46.475721Z","iopub.status.idle":"2025-08-09T19:30:50.659676Z","shell.execute_reply.started":"2025-08-09T19:30:46.475703Z","shell.execute_reply":"2025-08-09T19:30:50.658886Z"}},"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/skin-diseases\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"#base_path = '/kaggle/input/skindiseasedataset/SkinDisease/SkinDisease'\n\nbase_path='/kaggle/input/skin-diseases/kaggle'\n\ntrain_path = os.path.join(base_path, 'train')\ntest_path = os.path.join(base_path, 'test')\n\n# Listar clases\nclasses = sorted(os.listdir(train_path))\nnum_classes = len(classes)\n\n# Mostrar información\nprint(f\"Number of  total  clases: {num_classes}\")\nprint(\"Clases:\")\nfor cls in classes:\n    num_images = len(os.listdir(os.path.join(train_path, cls)))\n    print(f\"{cls}: {num_images} images\")\n","metadata":{"execution":{"iopub.status.busy":"2025-08-10T04:45:38.892074Z","iopub.execute_input":"2025-08-10T04:45:38.892761Z","iopub.status.idle":"2025-08-10T04:45:39.258435Z","shell.execute_reply.started":"2025-08-10T04:45:38.892734Z","shell.execute_reply":"2025-08-10T04:45:39.257672Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Number of  total  clases: 6\nClases:\n1. Enfeksiyonel: 6000 images\n2. Ekzama: 4070 images\n3. Akne: 2149 images\n4. Pigment: 1020 images\n5. Benign: 10888 images\n6. Malign: 6783 images\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import cv2\nimport numpy as np\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# ⬛ IMAGE SETTINGS\nIMG_SIZE = 224\nBATCH_SIZE = 32\nEPOCHS = 30","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T04:45:40.629315Z","iopub.execute_input":"2025-08-10T04:45:40.629755Z","iopub.status.idle":"2025-08-10T04:45:40.633496Z","shell.execute_reply.started":"2025-08-10T04:45:40.629735Z","shell.execute_reply":"2025-08-10T04:45:40.632793Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"\n\ndef get_generators(preprocess_func):\n    train_datagen = ImageDataGenerator(\n        preprocessing_function=preprocess_func,\n        rotation_range=25,\n        zoom_range=0.2,\n        width_shift_range=0.15,\n        height_shift_range=0.15,\n        shear_range=0.1,\n        horizontal_flip=True,\n        fill_mode='nearest',\n        brightness_range=[0.8, 1.2]\n\n    )\n\n    test_datagen = ImageDataGenerator(preprocessing_function=preprocess_func)\n\n    train_generator = train_datagen.flow_from_directory(\n        train_path,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical'\n    )\n\n    test_generator = test_datagen.flow_from_directory(\n        test_path,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        shuffle=False\n    )\n\n    return train_generator, test_generator","metadata":{"execution":{"iopub.status.busy":"2025-08-10T04:45:43.910428Z","iopub.execute_input":"2025-08-10T04:45:43.910729Z","iopub.status.idle":"2025-08-10T04:45:43.916043Z","shell.execute_reply.started":"2025-08-10T04:45:43.910708Z","shell.execute_reply":"2025-08-10T04:45:43.915209Z"},"trusted":true},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# Visualization Data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nclass_counts = {cls: len(os.listdir(os.path.join(train_path, cls))) for cls in classes}\ndf_counts = pd.DataFrame(list(class_counts.items()), columns=['Clase', 'count'])\ndf_counts = df_counts.sort_values(by='count', ascending=False)\n\n# Visualizar\nimport seaborn as sns\nplt.figure(figsize=(12,6))\n\nsns.barplot(x='count', y='Clase', data=df_counts)\n\nplt.title(\"Count of images per class\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-08-10T04:45:53.439137Z","iopub.execute_input":"2025-08-10T04:45:53.439437Z","iopub.status.idle":"2025-08-10T04:45:53.725133Z","shell.execute_reply.started":"2025-08-10T04:45:53.439416Z","shell.execute_reply":"2025-08-10T04:45:53.724561Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"#  Fine-Tuning","metadata":{}},{"cell_type":"code","source":"def train_model(base_model, preprocess_func, model_name):\n    print(f\"\\n  {model_name} \")\n\n    train_generator, test_generator = get_generators(preprocess_func)\n     # Compute class weights\n    class_weights = compute_class_weight(\n        class_weight='balanced',\n        classes=np.unique(train_generator.classes),\n        y=train_generator.classes\n    )\n    class_weights = dict(enumerate(class_weights))\n    print(\"Class Weights:\", class_weights)\n\n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(512, activation='relu')(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n\n    model = Model(inputs=base_model.input, outputs=predictions)\n    '''\n    # Fine-tuning complet\n    for layer in base_model.layers[:-50]:\n        layer.trainable = False\n    for layer in base_model.layers[-50:]:\n        layer.trainable = True\n        \n    '''\n    for layer in base_model.layers:\n         layer.trainable = True\n    \n\n\n    model.compile(optimizer=Adam(learning_rate=1e-4),\n                  loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n\n    # Callbacks\n    checkpoint = ModelCheckpoint(f\"{model_name}.h5\", monitor='val_accuracy', save_best_only=True, mode='max', verbose=1)\n    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, min_lr=1e-6, verbose=1)\n    early_stop = EarlyStopping(monitor='val_loss', patience=4, restore_best_weights=True)\n\n    # Entrenamiento\n    history = model.fit(\n        train_generator,\n        validation_data=test_generator,\n        epochs=EPOCHS,\n        callbacks=[early_stop, checkpoint, reduce_lr],\n        class_weight=class_weights,\n        verbose=1\n    )\n\n    # Guardar historial\n    with open(f\"{model_name}_history.json\", \"w\") as f:\n        json.dump(history.history, f)\n\n    # Evaluación\n    loss, acc = model.evaluate(test_generator)\n    print(f\"{model_name} - Precision final: {acc:.4f} - Loss: {loss:.4f}\")\n\n    return model, history","metadata":{"execution":{"iopub.status.busy":"2025-08-10T04:45:57.201492Z","iopub.execute_input":"2025-08-10T04:45:57.201806Z","iopub.status.idle":"2025-08-10T04:45:57.210086Z","shell.execute_reply.started":"2025-08-10T04:45:57.201783Z","shell.execute_reply":"2025-08-10T04:45:57.209353Z"},"trusted":true},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# **Models**","metadata":{}},{"cell_type":"markdown","source":"# **ResNet50**","metadata":{}},{"cell_type":"code","source":"# Entrenar ResNet50\nresnet_model = ResNet50(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))\nresnet_trained, history_resnet = train_model(resnet_model, resnet_preprocess, 'ResNet50')","metadata":{"execution":{"iopub.status.busy":"2025-08-09T19:33:40.945978Z","iopub.execute_input":"2025-08-09T19:33:40.946743Z","iopub.status.idle":"2025-08-09T21:45:52.090273Z","shell.execute_reply.started":"2025-08-09T19:33:40.946714Z","shell.execute_reply":"2025-08-09T21:45:52.089638Z"},"trusted":true},"outputs":[{"name":"stderr","text":"I0000 00:00:1754768021.712978      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n","output_type":"stream"},{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m94765736/94765736\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 0us/step\n\n  ResNet50 \nFound 30909 images belonging to 6 classes.\nFound 3928 images belonging to 6 classes.\nClass Weights: {0: 0.8585833333333334, 1: 1.2657248157248158, 2: 2.3982774674115457, 3: 5.050490196078432, 4: 0.47313556208670093, 5: 0.7594722099366062}\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/30\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1754768110.838379      99 service.cc:148] XLA service 0x7c25b8004ba0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1754768110.839075      99 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\nI0000 00:00:1754768115.523643      99 cuda_dnn.cc:529] Loaded cuDNN version 90300\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m  1/966\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m19:53:11\u001b[0m 74s/step - accuracy: 0.1250 - loss: 1.6007","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1754768134.131678      99 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 829ms/step - accuracy: 0.6116 - loss: 1.0064\nEpoch 1: val_accuracy improved from -inf to 0.66421, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m939s\u001b[0m 896ms/step - accuracy: 0.6116 - loss: 1.0063 - val_accuracy: 0.6642 - val_loss: 0.9063 - learning_rate: 1.0000e-04\nEpoch 2/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 546ms/step - accuracy: 0.7485 - loss: 0.6634\nEpoch 2: val_accuracy improved from 0.66421 to 0.74847, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m550s\u001b[0m 569ms/step - accuracy: 0.7485 - loss: 0.6634 - val_accuracy: 0.7485 - val_loss: 0.6692 - learning_rate: 1.0000e-04\nEpoch 3/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 530ms/step - accuracy: 0.7911 - loss: 0.5426\nEpoch 3: val_accuracy improved from 0.74847 to 0.77775, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m535s\u001b[0m 554ms/step - accuracy: 0.7911 - loss: 0.5427 - val_accuracy: 0.7777 - val_loss: 0.6392 - learning_rate: 1.0000e-04\nEpoch 4/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 540ms/step - accuracy: 0.8121 - loss: 0.4776\nEpoch 4: val_accuracy improved from 0.77775 to 0.80015, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m545s\u001b[0m 564ms/step - accuracy: 0.8121 - loss: 0.4776 - val_accuracy: 0.8002 - val_loss: 0.5652 - learning_rate: 1.0000e-04\nEpoch 5/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 536ms/step - accuracy: 0.8358 - loss: 0.4168\nEpoch 5: val_accuracy improved from 0.80015 to 0.80372, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m540s\u001b[0m 559ms/step - accuracy: 0.8358 - loss: 0.4168 - val_accuracy: 0.8037 - val_loss: 0.5879 - learning_rate: 1.0000e-04\nEpoch 6/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 520ms/step - accuracy: 0.8531 - loss: 0.3754\nEpoch 6: val_accuracy improved from 0.80372 to 0.82561, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m525s\u001b[0m 544ms/step - accuracy: 0.8531 - loss: 0.3754 - val_accuracy: 0.8256 - val_loss: 0.5198 - learning_rate: 1.0000e-04\nEpoch 7/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 526ms/step - accuracy: 0.8696 - loss: 0.3254\nEpoch 7: val_accuracy improved from 0.82561 to 0.82790, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m530s\u001b[0m 549ms/step - accuracy: 0.8696 - loss: 0.3254 - val_accuracy: 0.8279 - val_loss: 0.5268 - learning_rate: 1.0000e-04\nEpoch 8/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 523ms/step - accuracy: 0.8853 - loss: 0.2873\nEpoch 8: val_accuracy improved from 0.82790 to 0.82841, saving model to ResNet50.h5\n\nEpoch 8: ReduceLROnPlateau reducing learning rate to 4.999999873689376e-05.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m529s\u001b[0m 547ms/step - accuracy: 0.8853 - loss: 0.2873 - val_accuracy: 0.8284 - val_loss: 0.5615 - learning_rate: 1.0000e-04\nEpoch 9/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 522ms/step - accuracy: 0.9173 - loss: 0.1955\nEpoch 9: val_accuracy improved from 0.82841 to 0.88289, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m527s\u001b[0m 545ms/step - accuracy: 0.9173 - loss: 0.1955 - val_accuracy: 0.8829 - val_loss: 0.3887 - learning_rate: 5.0000e-05\nEpoch 10/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 532ms/step - accuracy: 0.9399 - loss: 0.1464\nEpoch 10: val_accuracy improved from 0.88289 to 0.88951, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m536s\u001b[0m 555ms/step - accuracy: 0.9399 - loss: 0.1464 - val_accuracy: 0.8895 - val_loss: 0.3823 - learning_rate: 5.0000e-05\nEpoch 11/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 520ms/step - accuracy: 0.9458 - loss: 0.1269\nEpoch 11: val_accuracy did not improve from 0.88951\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m524s\u001b[0m 542ms/step - accuracy: 0.9458 - loss: 0.1269 - val_accuracy: 0.8857 - val_loss: 0.3911 - learning_rate: 5.0000e-05\nEpoch 12/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 537ms/step - accuracy: 0.9514 - loss: 0.1134\nEpoch 12: val_accuracy did not improve from 0.88951\n\nEpoch 12: ReduceLROnPlateau reducing learning rate to 2.499999936844688e-05.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m540s\u001b[0m 559ms/step - accuracy: 0.9514 - loss: 0.1134 - val_accuracy: 0.8801 - val_loss: 0.4260 - learning_rate: 5.0000e-05\nEpoch 13/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 528ms/step - accuracy: 0.9633 - loss: 0.0869\nEpoch 13: val_accuracy improved from 0.88951 to 0.89995, saving model to ResNet50.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m532s\u001b[0m 551ms/step - accuracy: 0.9633 - loss: 0.0869 - val_accuracy: 0.8999 - val_loss: 0.3907 - learning_rate: 2.5000e-05\nEpoch 14/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 516ms/step - accuracy: 0.9739 - loss: 0.0630\nEpoch 14: val_accuracy did not improve from 0.89995\n\nEpoch 14: ReduceLROnPlateau reducing learning rate to 1.249999968422344e-05.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m520s\u001b[0m 538ms/step - accuracy: 0.9739 - loss: 0.0630 - val_accuracy: 0.8931 - val_loss: 0.4081 - learning_rate: 2.5000e-05\n\u001b[1m123/123\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 174ms/step - accuracy: 0.8827 - loss: 0.4333\nResNet50 - Precision final: 0.8895 - Loss: 0.3823\n","output_type":"stream"}],"execution_count":9},{"cell_type":"markdown","source":"# **DenseNet121**","metadata":{}},{"cell_type":"code","source":"# Entrenar DenseNet121\ndensenet_model = DenseNet121(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))\ndensenet_trained, history_densenet = train_model(densenet_model, densenet_preprocess, 'DenseNet121')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-09T21:55:45.675598Z","iopub.execute_input":"2025-08-09T21:55:45.676255Z","iopub.status.idle":"2025-08-10T00:38:02.655587Z","shell.execute_reply.started":"2025-08-09T21:55:45.676229Z","shell.execute_reply":"2025-08-10T00:38:02.654980Z"}},"outputs":[{"name":"stdout","text":"\n  DenseNet121 \nFound 30909 images belonging to 6 classes.\nFound 3928 images belonging to 6 classes.\nClass Weights: {0: 0.8585833333333334, 1: 1.2657248157248158, 2: 2.3982774674115457, 3: 5.050490196078432, 4: 0.47313556208670093, 5: 0.7594722099366062}\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 588ms/step - accuracy: 0.5983 - loss: 1.0326\nEpoch 1: val_accuracy improved from -inf to 0.74822, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m776s\u001b[0m 635ms/step - accuracy: 0.5984 - loss: 1.0325 - val_accuracy: 0.7482 - val_loss: 0.6689 - learning_rate: 1.0000e-04\nEpoch 2/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 514ms/step - accuracy: 0.7489 - loss: 0.6605\nEpoch 2: val_accuracy improved from 0.74822 to 0.76247, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m519s\u001b[0m 537ms/step - accuracy: 0.7489 - loss: 0.6605 - val_accuracy: 0.7625 - val_loss: 0.6321 - learning_rate: 1.0000e-04\nEpoch 3/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 516ms/step - accuracy: 0.7869 - loss: 0.5364\nEpoch 3: val_accuracy did not improve from 0.76247\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m520s\u001b[0m 538ms/step - accuracy: 0.7869 - loss: 0.5364 - val_accuracy: 0.7477 - val_loss: 0.6768 - learning_rate: 1.0000e-04\nEpoch 4/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 518ms/step - accuracy: 0.8162 - loss: 0.4617\nEpoch 4: val_accuracy improved from 0.76247 to 0.81034, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m524s\u001b[0m 542ms/step - accuracy: 0.8162 - loss: 0.4617 - val_accuracy: 0.8103 - val_loss: 0.5355 - learning_rate: 1.0000e-04\nEpoch 5/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 521ms/step - accuracy: 0.8442 - loss: 0.3965\nEpoch 5: val_accuracy improved from 0.81034 to 0.83478, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m526s\u001b[0m 544ms/step - accuracy: 0.8442 - loss: 0.3965 - val_accuracy: 0.8348 - val_loss: 0.4668 - learning_rate: 1.0000e-04\nEpoch 6/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 523ms/step - accuracy: 0.8643 - loss: 0.3368\nEpoch 6: val_accuracy did not improve from 0.83478\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m527s\u001b[0m 545ms/step - accuracy: 0.8643 - loss: 0.3368 - val_accuracy: 0.8136 - val_loss: 0.5055 - learning_rate: 1.0000e-04\nEpoch 7/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 517ms/step - accuracy: 0.8776 - loss: 0.3017\nEpoch 7: val_accuracy did not improve from 0.83478\n\nEpoch 7: ReduceLROnPlateau reducing learning rate to 4.999999873689376e-05.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m521s\u001b[0m 539ms/step - accuracy: 0.8776 - loss: 0.3017 - val_accuracy: 0.8294 - val_loss: 0.4983 - learning_rate: 1.0000e-04\nEpoch 8/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 521ms/step - accuracy: 0.9151 - loss: 0.2041\nEpoch 8: val_accuracy improved from 0.83478 to 0.88416, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m526s\u001b[0m 544ms/step - accuracy: 0.9151 - loss: 0.2041 - val_accuracy: 0.8842 - val_loss: 0.3624 - learning_rate: 5.0000e-05\nEpoch 9/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 525ms/step - accuracy: 0.9369 - loss: 0.1480\nEpoch 9: val_accuracy improved from 0.88416 to 0.88697, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m531s\u001b[0m 549ms/step - accuracy: 0.9369 - loss: 0.1480 - val_accuracy: 0.8870 - val_loss: 0.3630 - learning_rate: 5.0000e-05\nEpoch 10/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 521ms/step - accuracy: 0.9459 - loss: 0.1274\nEpoch 10: val_accuracy did not improve from 0.88697\n\nEpoch 10: ReduceLROnPlateau reducing learning rate to 2.499999936844688e-05.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m524s\u001b[0m 542ms/step - accuracy: 0.9459 - loss: 0.1274 - val_accuracy: 0.8814 - val_loss: 0.3926 - learning_rate: 5.0000e-05\nEpoch 11/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 510ms/step - accuracy: 0.9573 - loss: 0.0993\nEpoch 11: val_accuracy improved from 0.88697 to 0.90453, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m515s\u001b[0m 533ms/step - accuracy: 0.9573 - loss: 0.0993 - val_accuracy: 0.9045 - val_loss: 0.3376 - learning_rate: 2.5000e-05\nEpoch 12/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 517ms/step - accuracy: 0.9660 - loss: 0.0810\nEpoch 12: val_accuracy improved from 0.90453 to 0.90631, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m521s\u001b[0m 540ms/step - accuracy: 0.9660 - loss: 0.0810 - val_accuracy: 0.9063 - val_loss: 0.3564 - learning_rate: 2.5000e-05\nEpoch 13/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 515ms/step - accuracy: 0.9719 - loss: 0.0703\nEpoch 13: val_accuracy did not improve from 0.90631\n\nEpoch 13: ReduceLROnPlateau reducing learning rate to 1.249999968422344e-05.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m518s\u001b[0m 536ms/step - accuracy: 0.9719 - loss: 0.0703 - val_accuracy: 0.9020 - val_loss: 0.3773 - learning_rate: 2.5000e-05\nEpoch 14/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 531ms/step - accuracy: 0.9768 - loss: 0.0564\nEpoch 14: val_accuracy improved from 0.90631 to 0.91930, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m536s\u001b[0m 555ms/step - accuracy: 0.9768 - loss: 0.0564 - val_accuracy: 0.9193 - val_loss: 0.3225 - learning_rate: 1.2500e-05\nEpoch 15/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 518ms/step - accuracy: 0.9786 - loss: 0.0490\nEpoch 15: val_accuracy did not improve from 0.91930\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m522s\u001b[0m 540ms/step - accuracy: 0.9786 - loss: 0.0490 - val_accuracy: 0.9190 - val_loss: 0.3283 - learning_rate: 1.2500e-05\nEpoch 16/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 520ms/step - accuracy: 0.9792 - loss: 0.0515\nEpoch 16: val_accuracy did not improve from 0.91930\n\nEpoch 16: ReduceLROnPlateau reducing learning rate to 6.24999984211172e-06.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m524s\u001b[0m 542ms/step - accuracy: 0.9792 - loss: 0.0515 - val_accuracy: 0.9180 - val_loss: 0.3248 - learning_rate: 1.2500e-05\nEpoch 17/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 519ms/step - accuracy: 0.9844 - loss: 0.0426\nEpoch 17: val_accuracy improved from 0.91930 to 0.92261, saving model to DenseNet121.h5\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m525s\u001b[0m 543ms/step - accuracy: 0.9844 - loss: 0.0426 - val_accuracy: 0.9226 - val_loss: 0.3241 - learning_rate: 6.2500e-06\nEpoch 18/30\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 547ms/step - accuracy: 0.9853 - loss: 0.0369\nEpoch 18: val_accuracy improved from 0.92261 to 0.92490, saving model to DenseNet121.h5\n\nEpoch 18: ReduceLROnPlateau reducing learning rate to 3.12499992105586e-06.\n\u001b[1m966/966\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m555s\u001b[0m 574ms/step - accuracy: 0.9853 - loss: 0.0369 - val_accuracy: 0.9249 - val_loss: 0.3256 - learning_rate: 6.2500e-06\n\u001b[1m123/123\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 170ms/step - accuracy: 0.9206 - loss: 0.3390\nDenseNet121 - Precision final: 0.9193 - Loss: 0.3225\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"# **VGG16**","metadata":{}},{"cell_type":"code","source":"# Entrenar VGG16\nvgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))\nvgg_trained, history_vgg = train_model(vgg_model, vgg_preprocess, 'VGG16')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T04:46:12.725398Z","iopub.execute_input":"2025-08-10T04:46:12.725679Z"}},"outputs":[{"name":"stderr","text":"I0000 00:00:1754801173.633381      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\nI0000 00:00:1754801173.634112      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n","output_type":"stream"},{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n\n  VGG16 \nFound 30909 images belonging to 6 classes.\nFound 3928 images belonging to 6 classes.\nClass Weights: {0: 0.8585833333333334, 1: 1.2657248157248158, 2: 2.3982774674115457, 3: 5.050490196078432, 4: 0.47313556208670093, 5: 0.7594722099366062}\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/30\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1754801194.679273      99 service.cc:148] XLA service 0x78af0c003800 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1754801194.680225      99 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1754801194.680252      99 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\nI0000 00:00:1754801195.417008      99 cuda_dnn.cc:529] Loaded cuDNN version 90300\nI0000 00:00:1754801225.636518      99 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m414/966\u001b[0m \u001b[32m━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━\u001b[0m \u001b[1m6:34\u001b[0m 714ms/step - accuracy: 0.2616 - loss: 1.7466","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":"# **EfficientNetB3**","metadata":{}},{"cell_type":"code","source":"efficient_model = EfficientNetB3(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))\nefficientnet_trained, history_eff = train_model(efficient_model, efficient_preprocess, 'EfficientNetB3')\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.457Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **InceptionV3**","metadata":{}},{"cell_type":"code","source":"inception_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))\ninception_trained, history_incep = train_model(inception_model, inception_preprocess, 'InceptionV3')\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.457Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **summary of architecture and model parameters**","metadata":{}},{"cell_type":"code","source":"def show_model_parameters(models):\n  \n    for model_path, preprocess_func, model_name in models:\n        print(\"=\" * 70)\n        print(f\" Model : {model_name}\")\n        print(\"=\" * 70)\n        model = load_model(model_path)\n        model.summary()\n        print(\"\\n\")\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.457Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"show_model_parameters([\n    (\"ResNet50.h5\", resnet_preprocess, \"ResNet50\"),\n    (\"DenseNet121.h5\", densenet_preprocess, \"DenseNet121\"),\n    (\"VGG16.h5\", vgg_preprocess, \"VGG16\"),\n    (\"EfficientNetB3.h5\", efficient_preprocess, \"EfficientNetB3\"),\n    (\"InceptionV3.h5\", inception_preprocess, \"InceptionV3\")\n])\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.457Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Metrics**","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.models import load_model\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndef evaluate_model(h5_model_name,  preprocess_func, model_name):\n    print(\"=\" * 60)\n    print(f\" Evaluation of models: {model_name}\")\n    print(\"=\" * 60)\n\n    # Cargar modelo\n    model = load_model(h5_model_name)\n\n    # Cargar test generator sin shuffle\n    test_datagen = ImageDataGenerator(preprocessing_function=preprocess_func)\n    test_generator_eval = test_datagen.flow_from_directory(\n        test_path,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        shuffle=False\n    )\n\n    # Predicciones\n    y_pred = np.argmax(model.predict(test_generator_eval), axis=1)\n    y_true = test_generator_eval.classes\n    class_names = list(test_generator_eval.class_indices.keys())\n\n    # Reporte por clase\n    print(\"\\n Report of classification per class:\\n\")\n    print(classification_report(y_true, y_pred, target_names=class_names))\n\n    # Precisión global\n    acc = accuracy_score(y_true, y_pred)\n    print(f\"Total model accuracy{model_name}: {acc * 100:.2f}%\\n\\n\")\n\n    return acc\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.457Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"evaluate_model(\"ResNet50.h5\", resnet_preprocess, \"ResNet50\")\nevaluate_model(\"DenseNet121.h5\", densenet_preprocess, \"DenseNet121\")\nevaluate_model(\"VGG16.h5\", vgg_preprocess, \"VGG16\")\nevaluate_model(\"EfficientNetB3.h5\", efficient_preprocess, \"EfficientNetB3\")\nevaluate_model(\"InceptionV3.h5\", inception_preprocess, \"InceptionV3\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.457Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Confusion matrix**","metadata":{}},{"cell_type":"code","source":"\n#Function for all models\ndef show_confusion_matrix(y_true, y_pred, class_names, model_name):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(12, 10))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                xticklabels=class_names,\n                yticklabels=class_names)\n    plt.title(f' Confusion Matrix - {model_name}', fontsize=16)\n    plt.xlabel('Predicción')\n    plt.ylabel('Real')\n    plt.xticks(rotation=90)\n    plt.yticks(rotation=0)\n    plt.tight_layout()\n    plt.show()\n\n\n# List of models and their preprocessing functions\nmodels = [\n    (\"ResNet50.h5\", resnet_preprocess, \"ResNet50\"),\n    (\"DenseNet121.h5\", densenet_preprocess, \"DenseNet121\"),\n    (\"VGG16.h5\", vgg_preprocess, \"VGG16\"),\n    (\"EfficientNetB3.h5\", efficient_preprocess, \"EfficientNetB3\"),\n    (\"InceptionV3.h5\", inception_preprocess, \"InceptionV3\")\n]\n\n# \nfor h5_name, preprocess_func, model_name in models:\n    print(f\" Evaluated {model_name}...\")\n    model = load_model(h5_name)\n\n    test_datagen = ImageDataGenerator(preprocessing_function=preprocess_func)\n    test_generator = test_datagen.flow_from_directory(\n        test_path,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        shuffle=False\n    )\n\n    y_true = test_generator.classes\n    y_pred = np.argmax(model.predict(test_generator), axis=1)\n    class_names = list(test_generator.class_indices.keys())\n\n    show_confusion_matrix(y_true, y_pred, class_names, model_name)\n\n\n# Acurracy & Loss","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.458Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_history(history, model_name):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    epochs_range = range(len(acc))\n\n    plt.figure(figsize=(12, 4))\n    \n    plt.subplot(1, 2, 1)\n    plt.plot(epochs_range, acc, label='Train Accuracy')\n    plt.plot(epochs_range, val_acc, label='Val Accuracy')\n    plt.title(f'{model_name} - Accuracy')\n    plt.legend()\n\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs_range, loss, label='Train Loss')\n    plt.plot(epochs_range, val_loss, label='Val Loss')\n    plt.title(f'{model_name} - Loss')\n    plt.legend()\n    \n    plt.show()\n\nplot_history(history_resnet, \"ResNet50\")\nplot_history(history_densenet, \"DenseNet121\")\nplot_history(history_vgg, \"VGG16\")\nplot_history(history_eff, \"EfficientNetB3\")\nplot_history(history_incep, \"InceptionV3\")\n\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.458Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **ROC**","metadata":{}},{"cell_type":"code","source":"def get_multiclass_roc(model_path, preprocess_func, model_name):\n    model = load_model(model_path)\n\n    test_datagen = ImageDataGenerator(preprocessing_function=preprocess_func)\n    test_generator = test_datagen.flow_from_directory(\n        test_path,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        shuffle=False\n    )\n\n    y_true = test_generator.classes\n    y_score = model.predict(test_generator, verbose=0)\n    class_names = list(test_generator.class_indices.keys())\n\n    \n    y_true_bin = label_binarize(y_true, classes=range(len(class_names)))\n\n    fpr = dict()\n    tpr = dict()\n    roc_auc = dict()\n\n    for i in range(len(class_names)):\n        fpr[i], tpr[i], _ = roc_curve(y_true_bin[:, i], y_score[:, i])\n        roc_auc[i] = auc(fpr[i], tpr[i])\n\n    # Micro-average\n    fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_true_bin.ravel(), y_score.ravel())\n    roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n\n    return fpr[\"micro\"], tpr[\"micro\"], roc_auc[\"micro\"], model_name","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.458Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def graph_roc_models(models_info):\n    plt.figure(figsize=(10, 8))\n\n    for model_path, preprocess_func, model_name in models_info:\n        fpr, tpr, auc_score, name = get_multiclass_roc(model_path, preprocess_func, model_name)\n        plt.plot(fpr, tpr, label=f'{name} (AUC = {auc_score:.2f})')\n\n    plt.plot([0, 1], [0, 1], 'k--', label='Random')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate (FPR)')\n    plt.ylabel('True Positive Rate (TPR)')\n    plt.title('ROC Curve - Model Comparison (micro-average)')\n    plt.legend(loc='lower right')\n    plt.grid(True)\n    plt.show()\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.456Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"models = [\n    (\"ResNet50.h5\", resnet_preprocess, \"ResNet50\"),\n    (\"DenseNet121.h5\", densenet_preprocess, \"DenseNet121\"),\n    (\"VGG16.h5\", vgg_preprocess, \"VGG16\"),\n    (\"EfficientNetB3.h5\", efficient_preprocess, \"EfficientNetB3\"),\n    (\"InceptionV3.h5\", inception_preprocess, \"InceptionV3\")\n]\n\ngraph_roc_models(models)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Show 4 predictions per model**","metadata":{}},{"cell_type":"code","source":"def undo_preprocessing(img_array):\n    img = img_array.copy()\n\n    # De [-1,1] a [0,1]\n    if img.min() < 0:\n        img = (img + 1) / 2\n    # De [0,255] a [0,1]\n    elif img.max() > 1:\n        img = img / 255.0\n\n    return np.clip(img, 0, 1)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def show_predictions(modelo_h5, preprocess_func, model_name):\n    print(f\"\\nShowing example predictions for {model_name}...\\n\")\n\n    model = load_model(modelo_h5)\n\n    # Generator without shuffle\n    test_datagen = ImageDataGenerator(preprocessing_function=preprocess_func)\n    test_generator = test_datagen.flow_from_directory(\n        test_path,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=1,  # 1 image at a time to make access easier\n        class_mode='categorical',\n        shuffle=False\n    )\n\n    class_names = list(test_generator.class_indices.keys())\n    x_test = []\n    y_true = []\n    filepaths = []\n\n    # Collect all images\n    for i in range(len(test_generator)):\n        img, label = test_generator[i]\n        x_test.append(img[0])\n        y_true.append(np.argmax(label[0]))\n        filepaths.append(test_generator.filepaths[i])\n\n    x_test = np.array(x_test)\n    y_true = np.array(y_true)\n\n    # Get predictions\n    y_pred_prob = model.predict(x_test, verbose=0)\n    y_pred = np.argmax(y_pred_prob, axis=1)\n\n    # Choose 4 random indices\n    indices = random.sample(range(len(x_test)), 4)\n\n    # Show images\n    plt.figure(figsize=(12, 6))\n    for i, idx in enumerate(indices):\n        plt.subplot(1, 4, i + 1)\n        plt.imshow(undo_preprocessing(x_test[idx]))\n        real = class_names[y_true[idx]]\n        pred = class_names[y_pred[idx]]\n        color = 'green' if real == pred else 'red'\n        plt.title(f\"Actual: {real}\\nPredicted: {pred}\", color=color, fontsize=10)\n        plt.axis('off')\n    plt.suptitle(f\"Predictions - {model_name}\", fontsize=14)\n    plt.tight_layout()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"show_predictions(\"ResNet50.h5\", resnet_preprocess, \"ResNet50\")\nshow_predictions(\"DenseNet121.h5\", densenet_preprocess, \"DenseNet121\")\nshow_predictions(\"VGG16.h5\", vgg_preprocess, \"VGG16\")\nshow_predictions(\"EfficientNetB3.h5\", efficient_preprocess, \"EfficientNetB3\")\nshow_predictions(\"InceptionV3.h5\", inception_preprocess, \"InceptionV3\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-08-10T04:25:08.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}